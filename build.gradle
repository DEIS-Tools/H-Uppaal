plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.runtime' version '1.12.7'
}

mainClassName = 'HUPPAAL'

java {
    sourceCompatibility = gradle.ext.javaVersion
    targetCompatibility = gradle.ext.javaVersion
}

javafx {
    version = '19'
    modules = ['javafx.controls',
               'javafx.fxml',
               'javafx.graphics',
               'javafx.base']
}

// This list of "allowed" illegal reflection access definitions originates from jfoenix in this github issue:
//    https://github.com/sshahine/JFoenix/issues/1200#issuecomment-828541961
// It's been edited to remove duplicate lines and to add consistency. Most of these generate a warning at runtime
//    that the mentioned module is unknown, but I'm keeping these until jfoenix starts fixing their awful codebase.
def reflectionHack = [
    "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
    "--add-opens=java.base/java.lang.reflect=com.jfoenix",
    "--add-opens=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED",
    "--add-opens=javafx.controls/javafx.scene.control.skin=com.jfoenix",
    "--add-exports=java.base/java.lang.reflect=ALL-UNNAMED",
    "--add-exports=java.base/java.lang.reflect=com.jfoenix",
    "--add-exports=javafx.base/com.sun.javafx.binding=ALL-UNNAMED",
    "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
    "--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED",
    "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix",
    "--add-exports=javafx.controls/com.Sun.javafx.scene.control.behavior=ALL-UNNAMED",
    "--add-exports=javafx.controls/com.Sun.javafx.scene.control.behavior=com.jfoenix",
    "--add-exports=javafx.controls/com.sun.javafx.binding=ALL-UNNAMED",
    "--add-exports=javafx.controls/com.sun.javafx.binding=com.jfoenix",
    "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED",
    "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
    "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
    "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
    "--add-exports=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED",
    "--add-exports=javafx.controls/javafx.scene.control.skin=com.jfoenix",
    "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
    "--add-exports=javafx.graphics/com.sun.javafx.scene=com.jfoenix",
    "--add-exports=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED",
    "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
]

application {
    applicationDefaultJvmArgs = ['-XX:+UseZGC'] + reflectionHack
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

// Uncomment and adjust the code below if you want to generate images for multiple platforms.
// (You need to also uncomment the line 'targetPlatformName = ...' in the jpackage block.)
/*
    targetPlatform("lin") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_linux_hotspot_15.0.2_7.tar.gz")
    }
    targetPlatform("mac") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_mac_hotspot_15.0.2_7.tar.gz") {
            downloadDir = "$buildDir/myMac"
            archiveName = "my-mac-jdk"
            archiveExtension = "tar.gz"
            pathToHome = "jdk-15.0.2+7/Contents/Home"
            overwrite = true
        }
    }
    targetPlatform("win") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_windows_hotspot_15.0.2_7.zip")
    }
*/

    launcher {
        noConsole = true
    }
    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/hellofx.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Acme Corporation']

        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'hellofx', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'hellofx']
        }
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
          srcDirs = ['src/main/resources']
        }
    }
}

dependencies {
    implementation  fileTree(dir: 'libs', include: ['*.jar'])

    implementation group: 'com.jfoenix', name: 'jfoenix', version: '9.0.10'
    implementation group: 'de.codecentric.centerdevice', name: 'javafxsvg', version: '1.3.0'
    implementation group: 'com.github.jiconfont', name: 'jiconfont-javafx', version: '1.0.0'
    implementation group: 'com.github.jiconfont', name: 'jiconfont-google_material_design_icons', version: '2.2.0.2'
    implementation group: 'org.kordamp.ikonli', name: 'ikonli-core', version: '12.3.1'
    implementation group: 'org.kordamp.ikonli', name: 'ikonli-material-pack', version: '12.3.1'
    implementation group: 'org.kordamp.ikonli', name: 'ikonli-javafx', version: '12.3.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    implementation group: 'org.hildan.fxgson', name: 'fx-gson', version: '4.0.1'
    implementation group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.10.9'

    implementation group: 'org.openjfx', name: 'javafx', version: '19'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: '19'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: '19'
    implementation group: 'org.openjfx', name: 'javafx-base', version: '19'

    //Junit
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.0'
    testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.9.0'
}

test {
    useJUnitPlatform()
}
